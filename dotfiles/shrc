#!/usr/bin/env bash
# vi: ft=sh
# config for both zsh and bash

#vim
alias uvim="vim -u NONE"
alias svim="vim -u \$HOME/.vim/vimrc"
alias neobundle="vim +NeoBundleInstall +qall"
alias n="nvim"

#term
export TERM="xterm-256color"
export LANG='en_US.UTF-8'
export LC_COLLATE="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export LOCALE_ARCHIVE=/usr/lib/locale/locale-archive

#tmux cannot remember why screen-256color-bce. this doesn't work on wsl
# alias tmux="TERM=screen-256color-bce tmux"

#ssh reverse tunneling
alias sshl="ssh -R 19999:localhost:22"

#show the rear of a file
function rear {
  python -c "ff=open('$1', 'rb'); ff.seek(-$2,2); print ff.read($2)"
}

#alias
alias ..g='git rev-parse && cd "$(git rev-parse --show-cdup)"'
alias g="git"
alias gd="git diff"
alias gf="git fetch origin"
alias gp="git push origin"
alias gs="git status"
alias gl="git log"
alias wo=workon

function ga {
  if [ -z "$1" ]; then
    git add -u
  else
    git add "$@"
  fi
}

#web pastebins
#hastebin.com
function haste {
  cat <<EOF | python -
from urllib.request import urlopen, Request
URL = "https://hastebin.com"
rsp = urlopen(Request(
    f"{URL}/documents",
    data=open("$1", 'rb').read(),
    method="POST",
    headers={"user-agent": ""},
))
print(f"{URL}/{rsp.read().decode()[8:-2]}")
EOF
}

function update_ssh_auth_sock {
  # Predictable SSH authentication socket location.
  SOCK="/tmp/ssh-agent-$USER-screen"
  if test "$SSH_AUTH_SOCK" && [ "$SSH_AUTH_SOCK" != "$SOCK" ]; then
    rm -f "/tmp/ssh-agent-$USER-screen"
    ln -sf "$SSH_AUTH_SOCK" "$SOCK"
    export SSH_AUTH_SOCK=$SOCK
  fi
}

update_ssh_auth_sock

# c
function c {
  exe=/tmp/${1%.*}
  rm -f "$exe"
  gcc "$@" -o "$exe" && $exe
}

# ssl
function showcrt {
  openssl x509 -in "$1" -text -noout
}

# venv
function venv {
  if [ -f "$PWD/.venv/bin/activate" ]; then
    # shellcheck disable=SC1091
    source "$PWD/.venv/bin/activate"
  else
    echo "no .venv found in current directory"
    return 1
  fi

  if [ -f "$PWD/.myvenv" ]; then
    # shellcheck disable=SC1091
    source "$PWD/.myvenv"
  fi
}

alias h="python3 -m http.server"

NIX_SH=$HOME/.nix-profile/etc/profile.d/nix.sh
if [ -f "$NIX_SH" ]; then
  # shellcheck source=/dev/null
  source "$NIX_SH"
fi
# bun completions
if [[ -s "$HOME/.bun/_bun" ]]; then
  source "$HOME/.bun/_bun"
fi
if command -v fnm &> /dev/null ; then
  eval $(fnm env)
fi
# export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--system-site-packages'
# python instance where virtualenvwrapper is installed
export VIRTUALENVWRAPPER_PYTHON=${VIRTUALENVWRAPPER_PYTHON:="$HOME/.local/bin/python"}
export GOPATH=$HOME/.go

#display for WSL
if [[ -f /proc/version ]]; then
  if grep -q microsoft /proc/version; then
    DISPLAY=$(grep nameserver /etc/resolv.conf | awk '{print $2}'):0
    export DISPLAY
  fi
fi

export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

safe_prepend_path() {
  local new_path=$1
  if [[ -d $new_path ]] && grep -vq "$new_path" <<<"$PATH"; then
    export PATH=$new_path:$PATH
  fi
}

if [[ $OSTYPE == darwin* ]]; then
  safe_prepend_path /opt/homebrew/bin
fi

paths=(
  /usr/local/bin
  "$HOME/Library/Haskell/bin"
  "$GOPATH/bin"
  "$HOME/.cabal/bin"
  "$HOME/.node/bin"
  "$HOME/.local/bin"
  "$HOME/.rye/shims"
)
for new_path in "${paths[@]}"; do
  safe_prepend_path "$new_path"
done

if [[ -f $HOME/.env ]]; then
  # shellcheck source=/dev/null
  source "$HOME/.env"
fi
