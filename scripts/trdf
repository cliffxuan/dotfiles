#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
import argparse

from rdflib import Graph, URIRef

SUPPORTED_FORMATS = ['turtle', 'xml', 'nt', 'json-ld']


def main(argv=None):
    args = argument_parser().parse_args(argv)

    if args.source_format:
        source_format = args.source_format
    else:
        ext = args.filename.name.split('.')[-1]
        source_format = {
            'ttl': 'turtle', 'xml': 'xml', 'json': 'json-ld'}.get(ext)
    if not source_format:
        raise Exception('Cannot find source format. pass in --source_format.')

    g = Graph()
    g.parse(data=args.filename.read(), format=source_format)
    for ns, url in extract_namespaces(g).iteritems():
        g.bind(ns, url)
    sys.stderr.write('detected format {}'.format(source_format))
    if args.target_format == 'json-ld':
        context = {k: v for k, v in g.namespaces()}
        target = g.serialize(format=args.target_format, context=context)
    else:
        target = g.serialize(format=args.target_format)
    sys.stdout.write(target)


def get_ns(uriref):
    """
    get the namespace abbrev and url
    """
    ns = uriref.split('/')[-1].split('#')[0]
    url = ''.join(uriref.partition('#')[:-1])
    return (ns, url)


def extract_namespaces(graph):
    """
    find all the namespaces used in a graph
    :return: iterator
    """
    def _iter_graph_by_elem(graph):
        for s, p, o in graph:
            yield s
            yield p
            yield o

    urirefs = filter(lambda x: type(x) == URIRef,
                     _iter_graph_by_elem(graph))
    return dict(map(get_ns, urirefs))


def argument_parser():
    parser = argparse.ArgumentParser(
        description='describe me')
    parser.add_argument(
        'filename', type=argparse.FileType('r'),
        help='name of the file to convert')
    parser.add_argument(
        '--source_format', '-sf', choices=SUPPORTED_FORMATS,
        help='source format')
    parser.add_argument(
        'target_format', default='turtle', nargs='?',
        choices=SUPPORTED_FORMATS,
        help='target format')
    return parser


if __name__ == '__main__':
    main()
