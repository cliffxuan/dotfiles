{
  "pdb settrace": {
    "prefix": "dd",
    "body": [
      "__import__(\"pdb\").set_trace()  # !!!!!!!!!!"
    ],
    "description": "pdb.settrace()"
  },
  "kickoff": {
    "prefix": "ko",
    "body": [
      "#!/usr/bin/env python",
      "# -*- coding: utf-8 -*-",
      "\"\"\"",
      "\"\"\"",
      "import typing as t",
      "",
      "",
      "def main():",
      "    pass",
      "",
      "",
      "if __name__ == \"__main__\":",
      "    main()"
    ],
    "description": "kickoff a script"
  },
  "parametrize": {
    "prefix": "parametrize",
    "body": [
      "import pytest",
      "",
      "",
      "@pytest.mark.parametrize(",
      "\"input,expected\",",
      "[",
      "(\"3+5\", 8),",
      "(\"6*9\", 42),",
      "],",
      "ids=[\"addition\", \"multiplication\"],",
      ")",
      "def test_eval(input, expected):",
      "assert eval(input) == expected"
    ],
    "description": "pytest parametrize"
  },
  "argparse": {
    "prefix": "ap",
    "body": [
      "import argparse",
      "",
      "",
      "def argument_parser():",
      "    parser = argparse.ArgumentParser(description=\"describe me\")",
      "    parser.add_argument(",
      "        \"filename\", type=argparse.FileType(\"r\"), help=\"name of the file to convert\"",
      "    )",
      "    parser.add_argument(",
      "        \"--source_format\", \"-sf\", choices=[\"xml\", \"json\"], help=\"source format\"",
      "    )",
      "    parser.add_argument(",
      "        \"target_format\",",
      "        default=\"xml\",",
      "        nargs=\"?\",",
      "        choices=[\"xml\", \"json\"],",
      "        help=\"target format\",",
      "    )",
      "    return parser",
      "",
      "",
      "def main(argv=None):",
      "    args = argument_parser().parse_args(argv)"
    ],
    "description": "argparse boilerplate"
  }
}
