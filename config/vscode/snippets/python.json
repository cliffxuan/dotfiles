{
  "sac": {
    "prefix": "sac",
    "description": "sqlalchemy connection",
    "body": [
      "import sqlalchemy as sa",
      "from sqlalchemy.orm import sessionmaker",
      "",
      "",
      "def get_session():",
      "    URI = 'mysql://root@localhost/db'",
      "    sess = sessionmaker(",
      "        bind=sa.create_engine(URI))()",
      "    return sess",
      ""
    ]
  },
  "cod": {
    "prefix": "cod",
    "description": "encoding for python scripts",
    "body": [
      "# -*- coding: utf-8 -*-",
      "$0"
    ]
  },
  "conn": {
    "prefix": "conn",
    "description": "sqlalchemy connection",
    "body": [
      "import sqlalchemy as sa",
      "conn = sa.create_engine('mysql://user:password@localhost/db').connect()"
    ]
  },
  "microdjango": {
    "prefix": "microdjango",
    "description": "django as micro framework",
    "body": [
      "# -*- coding: utf-8 -*-",
      "\"\"\"",
      "minimal django app. to run it:",
      "python app.py runserver",
      "\"\"\"",
      "",
      "import sys",
      "",
      "from django.conf import settings",
      "from django.conf.urls import patterns",
      "from django.http import HttpResponse",
      "from django.core.management import execute_from_command_line",
      "",
      "settings.configure(",
      "    DEBUG=True,",
      "    SECRET_KEY='placerandomsecretkeyhere',",
      "    ROOT_URLCONF=sys.modules[__name__],",
      ")",
      "",
      "",
      "def index(request):",
      "    return HttpResponse('Powered by Django')",
      "",
      "urlpatterns = patterns('', (r'^$', index),)",
      "",
      "if __name__ == \"__main__\":",
      "    execute_from_command_line(sys.argv)"
    ]
  },
  "multithreading": {
    "prefix": "multithreading",
    "description": "multi threading",
    "body": [
      "import threading",
      "",
      "",
      "def wait_to_run(func, event, sec, *arg, **kw):",
      "    event.wait(sec)",
      "    func(*arg)",
      "",
      "",
      "def multi_threading(target, concurrency, *args):",
      "    events = [threading.Event() for i in xrange(concurrency)]",
      "    threads = [threading.Thread(target=wait_to_run,",
      "                                args=(target, evt, 2) + args)",
      "               for evt in events]",
      "    for t in threads:",
      "        t.start()",
      "    for e in events:",
      "        e.set()",
      "    for t in threads:",
      "        t.join()"
    ]
  },
  "forkthreading": {
    "prefix": "forkthreading",
    "description": "fork and multithreading",
    "body": [
      "import os",
      "",
      "",
      "def wait_to_run(func, event, sec, *arg, **kw):",
      "    event.wait(sec)",
      "    func(*arg)",
      "",
      "",
      "def multi_threading(target, concurrency, *args):",
      "    events = [threading.Event() for i in xrange(concurrency)]",
      "    threads = [threading.Thread(target=wait_to_run,",
      "                                args=(target, evt, 2) + args)",
      "               for evt in events]",
      "    for t in threads:",
      "        t.start()",
      "    for e in events:",
      "        e.set()",
      "    for t in threads:",
      "        t.join()",
      "",
      "",
      "def fork_and_multi_threading(target, concurrency, *args):",
      "    pid = os.fork()",
      "    if pid == 0:",
      "        multi_threading(target, concurrency, *args)",
      "        os._exit(0)",
      "    return pid"
    ]
  },
  "rand": {
    "prefix": "rand",
    "description": "random string",
    "body": [
      "import random",
      "import string",
      "",
      "",
      "def rand_string(n):",
      "    options = string.ascii_uppercase + string.digits",
      "    return ''.join(random.choice(options) for _ in range(n))"
    ]
  },
  "parametrize": {
    "prefix": "parametrize",
    "description": "pytest.mark.parametrize",
    "body": [
      "import pytest",
      "",
      "",
      "@pytest.mark.parametrize(",
      "    \"input,expected\",",
      "    [",
      "        (\"3+5\", 8),",
      "        (\"6*9\", 42),",
      "    ],",
      "    ids=[\"addition\", \"multiplication\"],",
      ")",
      "def test_eval(input, expected):",
      "    assert eval(input) == expected"
    ]
  },
  "pwd": {
    "prefix": "pwd",
    "description": "current working directory",
    "body": [
      "from pathlib import Path",
      "",
      "PWD = Path(__file__).absolute().parent"
    ]
  },
  "tor": {
    "prefix": "tor",
    "description": "tornado server stub",
    "body": [
      "# -*- coding: utf-8 -*-",
      "import tornado.ioloop",
      "import tornado.web",
      "",
      "",
      "class MainHandler(tornado.web.RequestHandler):",
      "    def get(self):",
      "        self.write(\"Hello, world\")",
      "",
      "",
      "def make_app():",
      "    return tornado.web.Application([",
      "        (r\"/\", MainHandler),",
      "    ])",
      "",
      "if __name__ == \"__main__\":",
      "    app = make_app()",
      "    app.listen(8888)",
      "    tornado.ioloop.IOLoop.current().start()"
    ]
  },
  "djangocmd": {
    "prefix": "djangocmd",
    "description": "django command script",
    "body": [
      "#!/usr/bin/env python",
      "# -*- coding: utf-8 -*-",
      "",
      "from django.core.management.base import BaseCommand",
      "",
      "",
      "class Command(BaseCommand):",
      "",
      "    def add_arguments(self, parser):",
      "        parser.add_argument(",
      "            '-n', '--name', default='foo', help='name')",
      "",
      "    def handle(self, *args, **options):",
      "        print('command')"
    ]
  },
  "nocover": {
    "prefix": "nocover",
    "description": "no cover for coverage.py",
    "body": [
      "# pragma: no cover"
    ]
  },
  "np": {
    "prefix": "np",
    "description": "numpy pandas plotly.express",
    "body": [
      "import numpy as np",
      "import pandas as pd",
      "import plotly.express as px"
    ]
  },
  "dd": {
    "prefix": "dd",
    "description": "import pdb",
    "body": [
      "__import__(\"pdb\").set_trace()  # !!!!!!!!!!"
    ]
  },
  "ifm": {
    "prefix": "ifm",
    "description": "if main",
    "body": [
      "def main():",
      "    pass",
      "",
      "",
      "if __name__ == '__main__':",
      "    main()"
    ]
  },
  "sb": {
    "prefix": "sb",
    "description": "Shebang header for python scripts",
    "body": [
      "#!/usr/bin/env python3",
      "# -*- coding: utf-8 -*-",
      "$0"
    ]
  },
  "lgb": {
    "prefix": "lgb",
    "description": "basic logging",
    "body": [
      "import logging",
      "",
      "format = \"%(asctime)s - %(levelname)s - %(message)s\"",
      "logging.basicConfig(",
      "    filename=logfile,",
      "    level=logging.DEBUG,",
      "    format=format,",
      ")"
    ]
  },
  "lgs": {
    "prefix": "lgs",
    "description": "logging to stream",
    "body": [
      "format = '%(asctime)s - %(levelname)s - %(message)s'",
      "ch = logging.StreamHandler()",
      "ch.setFormatter(logging.Formatter(format))",
      "logger = logging.getLogger()",
      "logger.setLevel(logging.DEBUG)",
      "logger.addHandler(ch)"
    ]
  },
  "lgf": {
    "prefix": "lgf",
    "description": "logging to stream and file",
    "body": [
      "format = '%(asctime)s - %(levelname)s - %(message)s'",
      "ch = logging.StreamHandler()",
      "ch.setFormatter(logging.Formatter(format))",
      "fh = logging.FileHandler('spam.log')",
      "fh.setFormatter(logging.Formatter(format))",
      "logger = logging.getLogger()",
      "logger.setLevel(logging.DEBUG)",
      "logger.addHandler(ch)",
      "logger.addHandler(fh)"
    ]
  },
  "lgd": {
    "prefix": "lgd",
    "description": "logging to stream and file (dictConfig)",
    "body": [
      "def get_logger():",
      "    LOGGING = {",
      "        'version': 1,",
      "        'disable_existing_loggers': True,",
      "        'formatters': {",
      "            'simple': {'format': '%(asctime)s - %(levelname)s - %(message)s'}",
      "        },",
      "        'handlers': {",
      "            'console': {",
      "                'level': 'DEBUG',",
      "                'class': 'logging.StreamHandler',",
      "                'formatter': 'simple'",
      "            },",
      "            'file': {",
      "                'level': 'DEBUG',",
      "                'class': 'logging.FileHandler',",
      "                'filename': 'output.log',",
      "                'formatter': 'simple'",
      "            },",
      "        },",
      "        'loggers': {",
      "            __name__: {",
      "                'handlers': ['console', 'file'],",
      "                'level': 'DEBUG'",
      "            }",
      "        }",
      "    }",
      "    logging.config.dictConfig(LOGGING)",
      "    return logging.getLogger(__name__)",
      "",
      "logger = get_logger()"
    ]
  },
  "ap": {
    "prefix": "ap",
    "description": "argparse",
    "body": [
      "import argparse",
      "",
      "",
      "def argument_parser():",
      "    parser = argparse.ArgumentParser(description=\"describe me\")",
      "    parser.add_argument(",
      "        \"filename\", type=argparse.FileType(\"r\"), help=\"name of the file to convert\"",
      "    )",
      "    parser.add_argument(",
      "        \"--source_format\", \"-sf\", choices=[\"xml\", \"json\"], help=\"source format\"",
      "    )",
      "    parser.add_argument(",
      "        \"target_format\",",
      "        default=\"xml\",",
      "        nargs=\"?\",",
      "        choices=[\"xml\", \"json\"],",
      "        help=\"target format\",",
      "    )",
      "    return parser",
      "",
      "",
      "def main(argv=None):",
      "    args = argument_parser().parse_args(argv)"
    ]
  },
  "ko": {
    "prefix": "ko",
    "description": "kickoff a python script",
    "body": [
      "#!/usr/bin/env python",
      "# -*- coding: utf-8 -*-",
      "\"\"\"",
      "\"\"\"",
      "",
      "",
      "def main():",
      "    pass",
      "",
      "",
      "if __name__ == '__main__':",
      "    main()"
    ]
  },
  "dt": {
    "prefix": "dt",
    "description": "import datetime as dt",
    "body": [
      "import datetime as dt"
    ]
  },
  "tt": {
    "prefix": "tt",
    "description": "import typing as t",
    "body": [
      "import typing as t"
    ]
  },
  "setup": {
    "prefix": "setup",
    "description": "setup.py",
    "body": [
      "from setuptools import setup, find_namespace_packages",
      "",
      "setup(",
      "    name='myapp',",
      "    packages=find_namespace_packages(),",
      "\tpy_modules=[\"utils\"], # For a small module distribution",
      "\tpackage_data={\"\": [\"*.json\", \"*.md\"]},",
      "    author='cliff xuan'",
      ")"
    ]
  },
  "dp": {
    "prefix": "dp",
    "description": "date picker argument parser",
    "body": [
      "import argparse",
      "import datatime as dt",
      "",
      "",
      "def argument_parser(description=\"command\"):",
      "    parser = argparse.ArgumentParser(description=description)",
      "",
      "    # date selector",
      "    parser.add_argument(\"--end-date\", \"-ed\", help=\"end date\", type=valid_date)",
      "    parser.add_argument(\"--days\", \"-d\", type=int, help=\"days\")",
      "    parser.add_argument(\"--start-date\", \"-sd\", help=\"start date\", type=valid_date)",
      "    return parser",
      "",
      "",
      "def parse_dates(args):",
      "    if args.start_date and args.end_date:",
      "        start_date, end_date = args.start_date, args.end_date",
      "    elif args.start_date and args.days:",
      "        start_date = args.start_date",
      "        end_date = args.start_date + dt.timedelta(days=args.days)",
      "    elif args.end_date and args.days:",
      "        start_date = args.end_date - dt.timedelta(days=args.days)",
      "        end_date = args.end_date",
      "    elif args.start_date:",
      "        start_date = args.start_date",
      "        end_date = dt.date.today()",
      "    elif args.end_date:",
      "        end_date = args.end_date",
      "        start_date = end_date - dt.timedelta(days=1)",
      "    else:",
      "        end_date = dt.date.today()",
      "        start_date = end_date - dt.timedelta(days=args.days or 1)",
      "    print(",
      "        f\"start_date: {start_date}, end_date: {end_date},\"",
      "        f\" days: {(end_date - start_date).days}\"",
      "    )",
      "    return start_date, end_date",
      "",
      "",
      "def convert_date_range(start_date, end_date):",
      "    start_time = dt.datetime.combine(start_date, dt.time.min)",
      "    end_time = dt.datetime.combine(end_date, dt.time.max)",
      "    return start_time, end_time"
    ]
  }
}