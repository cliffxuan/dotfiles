# config for both zsh and bash
# path
if [[ $OSTYPE == darwin* ]]
then
    export PATH=$HOME/local/bin:$HOME/bin:/usr/local/opt/gnu-sed/libexec/gnubin:/usr/local/bin:/usr/local/sbin:$PATH
else
    if grep -vq "/usr/local/bin" <<< "$PATH"
    then
        export PATH=/usr/local/bin:$PATH
    fi
    export PATH=$HOME/local/bin:$HOME/bin:$PATH
fi

#vim
export EDITOR=`which editor`
function v() {
    if hash nvim 2>/dev/null && `python -c 'import neovim' &> /dev/null`
    then
        nvim-client $@
    else
        vim $@
    fi
}

if hash nyaovim 2>/dev/null
then
    alias n='nyaovim'
fi

alias uvim="vim -u NONE"
alias svim="vim -u $HOME/.vimfiles/sensible.vim"
alias neobundle="vim +NeoBundleInstall +qall"

#term
export TERM="xterm-256color"
export LANG='en_US.UTF-8'
export LC_COLLATE="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

#tmux cannot remember why screen-256color-bce. this doesn't work on wsl
# alias tmux="TERM=screen-256color-bce tmux"

#ssh reverse tunneling
alias sshl="ssh -R 19999:localhost:22"

#rvm
if [[ -d $HOME/.rvm ]]
then
    PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
fi

#rbenv
if [[ -d $HOME/.rbenv ]]
then
    PATH=$HOME/.rbenv/bin:$PATH
    eval "$(rbenv init -)"
fi

function install-rbenv() {
git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
}

#nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

#pyenv
if [[ -d $HOME/.pyenv ]]
then
    export PYENV_ROOT="$HOME/.pyenv"
    eval "$(pyenv init -)"
fi


#npm
if [[ -d /usr/local/share/npm/bin ]]
then
    PATH=/usr/local/share/npm/bin:$PATH
fi

#android sdk
ANDROID_HOME=$HOME/Library/Android/sdk
if [[ -d $ANDROID_HOME ]]
then
    export ANDROID_HOME
    PATH=$ANDROID_HOME/tools:$PATH
fi

#haskell
if [[ -d $HOME/Library/Haskell/bin ]]
then
    PATH=$HOME/Library/Haskell/bin:$PATH
fi

#linuxbrew
if [[ -d /home/linuxbrew/.linuxbrew/bin ]]
then
    PATH=$PATH:/home/linuxbrew/.linuxbrew/bin
fi

#phpbrew
if [[ -d $HOME/.phpbrew  ]]
then
    source $HOME/.phpbrew/bashrc
fi

function _all_vms() {
    reply=(`VBoxManage list vms | awk '{gsub("\"",""); print $1}'`)
}

function _running_vms() {
    reply=(`VBoxManage list runningvms | awk '{gsub("\"",""); print $1}'`)
}

function startvm {
    VBoxManage startvm $1 --type=headless
}
compctl -K _all_vms startvm

function poweroffvm {
    VBoxManage controlvm $1 poweroff
}
compctl -K _running_vms poweroffvm

function controlvm {
    VBoxManage controlvm $1 $2
}
compctl -K _all_vms controlvm

function removevm {
    VBoxManage unregistervm $1 --delete
}
compctl -K _all_vms removevm

#show the rear of a file
function rear {
python -c "ff=open('$1', 'rb'); ff.seek(-$2,2); print ff.read($2)"
}


#alias
alias ..g='git rev-parse && cd "$(git rev-parse --show-cdup)"'
alias g="git"
alias gd="git diff"
alias gf="git fetch origin"
alias gp="git push origin"
alias gs="git status"
alias gl="git log"
alias s="git status"
alias pt='py.test'

function ga {
    if [ -z $1 ]
    then
        git add -u
    else
        git add $@
    fi
}

#git all
function gall {
    for gitdir in $(find . -mindepth 2 -name .git -type d)
    do
        echo $gitdir
        cd $gitdir/..
        git --no-pager $@
        cd - > /dev/null
        echo
    done
}


#puppet
alias puppet-onetime="puppet agent --onetime --verbose --no-daemonize"

#z
. $HOME/dev/dotfiles/scripts/z.sh

#web pastebins
#hastebin.com
function haste {
cat <<EOF | python -
import urllib2
URL = "http://hastebin.com"
r = urllib2.urlopen(URL + "/documents", open("$1", 'r').read()).read()
print "{}/{}".format(URL, r[8:-2])
EOF
}

#sprunge.us
function sprunge {
#cat <<EOF | python -
#import urllib2
#URL = "http://sprunge.us/"
#r = urllib2.urlopen(URL, 'sprunge={}'.format(open("$1", 'r').read())).read()
#print r
#EOF
cat $1 | curl -F 'sprunge=<-' http://sprunge.us
}

function fave {
cat <<EOF | python -
import urllib
import urllib2
import json
SITEID = "61555X1384403"
long_url = "$1"
if not long_url.endswith('/'):
    long_url = long_url + '/'
params = urllib.urlencode({
    'user': SITEID,
    'url': long_url
})
url = "http://buyth.at/-make?{}".format(params)
r = urllib2.urlopen(url).read()
print json.loads(r)['shorturl']
EOF
}

if [[ $OSTYPE == darwin* ]]
then
    alias ec=$(which emacs)
    function emacs {
        /Applications/Emacs.app/Contents/MacOS/Emacs "$@" &
    }
    alias en="emacsclient -n"
fi


function update_ssh_auth_sock {
# Predictable SSH authentication socket location.
SOCK="/tmp/ssh-agent-$USER-screen"
if test $SSH_AUTH_SOCK && [ $SSH_AUTH_SOCK != $SOCK ]
then
    rm -f /tmp/ssh-agent-$USER-screen
    ln -sf $SSH_AUTH_SOCK $SOCK
    export SSH_AUTH_SOCK=$SOCK
fi
}

update_ssh_auth_sock

# docker
function _dk_vms() {
    reply=(`docker-machine ls -q`)
}

function di {
    if [[ -S /var/run/docker.sock  ]] && cat /var/run/docker.sock 2> /dev/null
    then
        echo 'use native docker'
        return 0
    fi
    echo 'use docker machine'
    if [[ -z $1 ]]
    then
        eval "$(docker-machine env $(docker-machine ls -q | sed -n 1p))"
    else
        eval "$(docker-machine env $1)"
    fi
}
compctl -K _dk_vms di

function rmimages {
  docker rmi $(docker images --quiet --filter "dangling=true")
}

function synctime {
  docker-machine ssh $1 sudo ntpclient -s -h pool.ntp.org
}
compctl -K _dk_vms synctime

function refreshdns {
    docker-machine ssh $1 sudo udhcpc
}
compctl -K _dk_vms refreshdns

function gdns {
    docker-machine ssh $1 "sudo echo 'nameserver 8.8.8.8' > /etc/resolv.conf"
}
compctl -K _dk_vms gdns

function dkhostfile {
    # TODO dev is hardcoded for now
    sed "s/.* docker/`docker-machine ip dev` docker/" /etc/hosts | sudo tee /etc/hosts
}

function dkkillall {
    docker kill $(docker ps -a -q)
}

function dkrmall {
    docker rm $(docker ps -a -q)
}

function seagull {
    docker run -d -p 80:10086 -v /var/run/docker.sock:/var/run/docker.sock tobegit3hub/seagull
}

function dc {
    docker-machine create -d virtualbox --engine-opt dns=8.8.8.8 $@
}

function dr {
di `docker-machine ls -q | sed -n 1p`
if [[ -z $1 ]]
then
    docker run -it --rm --net host cliff/base
else
    ABS_PATH=`cd "$1"; pwd`
    WORK_DIR=/root/$(basename $ABS_PATH)
    docker run -it --rm -v $ABS_PATH:$WORK_DIR -w $WORK_DIR --net host cliff/base
fi
}

# rust
function rust {
    exe=/tmp/${1%.*}
    rm -f $exe
    rustc $1 -o $exe && $exe
}

# c
function c {
    exe=/tmp/${1%.*}
    rm -f $exe
    gcc $@ -o $exe && $exe
}

# babel-node
function es6 {
    babel-node $@
}


# ssl
function showcrt {
    openssl x509 -in $1 -text -noout
}


# proxy
function proxyus {
    cd ~/vagrant/noah; vagrant ssh -c mitmproxy
}

# sudo rsync
function sursync {
    rsync --rsync-path="sudo rsync" $@
}

alias p="python"
alias p3="python3"
alias h="python3 -m http.server"
alias i="python `which ptipython` --vi"
alias i3="python3 `which ptipython` --vi"

# if which pyenv > /dev/null
# then
    # eval "$(pyenv init -)"
# fi
NIX_SH=$HOME/.nix-profile/etc/profile.d/nix.sh
if [ -f $NIX_SH ]
then
    source $NIX_SH
    PATH=$HOME/.local/bin:$PATH
fi

# ag tag
if (( $+commands[tag] )); then
  tag() { command tag "$@"; source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null }
  alias ag=tag
  export TAG_CMD_FMT_STRING="editor {{.Filename}} +{{.LineNumber}}"
fi

alias ff="\ag -g"
# turn off bell
set bell-style none

function gkill {
    ps aux | grep "$*" | grep -v grep | awk '{print $2}' | xargs kill -9
}


function transfer {
    if [ $# -eq 0 ];
        then echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md";
        return 1;
    fi
    tmpfile=$( mktemp -t transferXXX );
    if tty -s;
        then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g'); curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile;
        else curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ;
    fi;
    cat $tmpfile; rm -f $tmpfile;
}

export BW_SESSION="rSd3094F2wGS6Xqdx2H7Yv1ogqRak5crUABv/SpePsL+C7NchtyBo+7KRMZwQdf0Yk67ROktZTlaRJQQJ7cpqg=="

if [[ $OSTYPE == cygwin ]]
then
    export CYGWIN=nodosfilewarning
    # virtualenvwrapper
    export VIRTUALENVWRAPPER_PYTHON="/cygdrive/c/Python/26/python.exe"
    export VIRTUALENVWRAPPER_VIRTUALENV="/cygdrive/c/Python/26/Scripts/virtualenv.exe"
    source "$HOME/dev/virtualenvwrapper/virtualenvwrapper.sh"
    # vim
    mvim()  {
        run mintty -c ~/.viminttyrc -i ~/.vim/vim.ico -e vim $@
       }
    alias open=cygstart
else
    if type virtualenvwrapper.sh 2>&1 >/dev/null
    then
        if type python3 2>&1 >/dev/null
        then
            export VIRTUALENVWRAPPER_PYTHON=$(which python3)
        else
            export VIRTUALENVWRAPPER_PYTHON=$(which python2.7)
        fi
        source $(which virtualenvwrapper.sh)
        alias wo=workon
    fi
fi
export PROJECT_HOME=$HOME/dev
# export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--system-site-packages'
if [[ -f $HOME/.extra ]]
then
    source $HOME/.extra
fi
export GOPATH=$HOME/.go
if [[ -d $GOPATH ]]
then
    PATH=$PATH:$GOPATH/bin
fi
