# config for both zsh and bash
# path
if [[ $OSTYPE == darwin* ]]
then
    export PATH=$HOME/local/bin:$HOME/bin:/usr/local/bin:/usr/local/sbin:$PATH
else
    export PATH=$HOME/local/bin:$HOME/bin:$PATH
fi

if [[ $OSTYPE == cygwin ]]
then
    export CYGWIN=nodosfilewarning
    # virtualenvwrapper
    export VIRTUALENVWRAPPER_PYTHON="/cygdrive/c/Python/26/python.exe"
    export VIRTUALENVWRAPPER_VIRTUALENV="/cygdrive/c/Python/26/Scripts/virtualenv.exe"
    source "$HOME/dev/virtualenvwrapper/virtualenvwrapper.sh"
    # vim
    mvim()  {
        run mintty -c ~/.viminttyrc -i ~/.vim/vim.ico -e vim $@
       }
    alias open=cygstart
else
    if type virtualenvwrapper.sh 2>&1 >/dev/null
    then
        export VIRTUALENVWRAPPER_PYTHON=$(which python2.7)
        source $(which virtualenvwrapper.sh)
    fi
fi
export PROJECT_HOME=$HOME/dev
export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--system-site-packages'

#vim
alias v="vim"
alias uvim="vim -u NONE"
alias neobundle="vim +NeoBundleInstall +qall"

#GAE
if [[ $OSTYPE == darwin* ]]
then
    GAE="/Applications/GoogleAppEngineLauncher.app"
    GAE=$GAE"/Contents/Resources/GoogleAppEngine-default.bundle"
    GAE=$GAE"/Contents/Resources/google_appengine"
    if [[ -d $GAE ]]
    then
        export GAE
        cdgae() {
            cd $GAE
        }
    fi
fi

#term
export TERM="xterm-256color"

#tmux
alias tmux="TERM=screen-256color-bce tmux"

#ssh reverse tunneling
alias sshl="ssh -R 19999:localhost:22"

#rvm
if [[ -d $HOME/.rvm ]]
then
    PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
fi

#rbenv
if [[ -d $HOME/.rbenv ]]
then
    PATH=$HOME/.rbenv/bin:$PATH
    eval "$(rbenv init -)"
fi

#npm
if [[ -d /usr/local/share/npm/bin ]]
then
    PATH=/usr/local/share/npm/bin:$PATH
fi

#android sdk
if [[ -d $HOME/lib/android-sdk/ ]]
then
    PATH=$HOME/lib/android-sdk/tools:$HOME/lib/android-sdk/platform-tools:$PATH
fi

#haskell
if [[ -d $HOME/Library/Haskell/bin ]]
then
    PATH=$HOME/Library/Haskell/bin:$PATH
fi

#phpbrew
if [[ -d $HOME/.phpbrew  ]]
then
    source $HOME/.phpbrew/bashrc
fi

function _all_vms() {
    reply=(`VBoxManage list vms | awk '{gsub("\"",""); print $1}'`)
}

function _running_vms() {
    reply=(`VBoxManage list runningvms | awk '{gsub("\"",""); print $1}'`)
}

function startvm {
    VBoxManage startvm $1 --type=headless
}
compctl -K _all_vms startvm

function poweroffvm {
    VBoxManage controlvm $1 poweroff
}
compctl -K _running_vms poweroffvm

function controlvm {
    VBoxManage controlvm $1 $2
}
compctl -K _all_vms controlvm

function removevm {
    VBoxManage unregistervm $1 --delete
}
compctl -K _all_vms removevm

#show the rear of a file
function rear {
python -c "ff=open('$1', 'rb'); ff.seek(-$2,2); print ff.read($2)"
}


#alias
alias ..g='git rev-parse && cd "$(git rev-parse --show-cdup)"'
alias g="git"
alias t='python $HOME/lib/t/t.py --task-dir $HOME/.tasks --list tasks'
alias s="git status"
#puppet
alias puppet-onetime="puppet agent --onetime --verbose --no-daemonize"

#z
#. `brew --prefix`/etc/profile.d/z.sh

#web pastebins
#hastebin.com
function haste {
cat <<EOF | python -
import urllib2
URL = "http://hastebin.com"
r = urllib2.urlopen(URL + "/documents", open("$1", 'r').read()).read()
print "{}/{}".format(URL, r[8:-2])
EOF
}

#sprunge.us
function sprunge {
#cat <<EOF | python -
#import urllib2
#URL = "http://sprunge.us/"
#r = urllib2.urlopen(URL, 'sprunge={}'.format(open("$1", 'r').read())).read()
#print r
#EOF
cat $1 | curl -F 'sprunge=<-' http://sprunge.us
}

function fave {
cat <<EOF | python -
import urllib
import urllib2
import json
SITEID = "61555X1384403"
long_url = "$1"
if not long_url.endswith('/'):
    long_url = long_url + '/'
params = urllib.urlencode({
    'user': SITEID,
    'url': long_url
})
url = "http://buyth.at/-make?{}".format(params)
r = urllib2.urlopen(url).read()
print json.loads(r)['shorturl']
EOF
}

if [[ $OSTYPE == darwin* ]]
then
    alias ec=$(which emacs)
    function emacs {
        /Applications/Emacs.app/Contents/MacOS/Emacs "$@" &
    }
    alias en="emacsclient -n"
fi


function update_ssh_auth_sock {
# Predictable SSH authentication socket location.
SOCK="/tmp/ssh-agent-$USER-screen"
if test $SSH_AUTH_SOCK && [ $SSH_AUTH_SOCK != $SOCK ]
then
    rm -f /tmp/ssh-agent-$USER-screen
    ln -sf $SSH_AUTH_SOCK $SOCK
    export SSH_AUTH_SOCK=$SOCK
fi
}

update_ssh_auth_sock

export EDITOR=`which vim`

# docker
function _dk_vms() {
    reply=(`docker-machine ls -q`)
}

function di {
    eval "$(docker-machine env $1)"
}
compctl -K _dk_vms di

function rmimages {
  docker rm `docker ps --no-trunc -aq`
}

function synctime {
  docker-machine ssh $1 sudo ntpclient -s -h pool.ntp.org
}
compctl -K _dk_vms synctime

function refreshdns {
    docker-machine ssh $1 sudo udhcpc
}
compctl -K _dk_vms refreshdns

function dkhostfile {
    # TODO dev is hardcoded for now
    sed "s/.* docker/`docker-machine ip dev` docker/" /etc/hosts | sudo tee /etc/hosts
}

function dkkillall {
    docker kill $(docker ps -a -q)
}

function dkrmall {
    docker rm $(docker ps -a -q)
}

function seagull {
    docker run -d -p 80:10086 -v /var/run/docker.sock:/var/run/docker.sock tobegit3hub/seagull
}

function dr {
if [[ -z $DOCKER_HOST ]]
then
    di
fi
docker run -it --rm cliff/base
}

# rust
function rust {
    exe=/tmp/${1%.*}
    rm -f $exe
    rustc $1 -o $exe && $exe
}

# babel-node
function es6 {
    babel-node $@
}


# ssl
function showcrt {
    openssl x509 -in $1 -text -noout
}


# proxy
function proxyus {
    cd ~/vagrant/noah; vagrant ssh -c mitmproxy
}

# sudo rsync
function sursync {
    rsync --rsync-path="sudo rsync" $@
}

alias p="python"
alias i="ptipython --vi"
alias h="python -m SimpleHTTPServer"

if which pyenv > /dev/null
then
    eval "$(pyenv init -)"
fi
